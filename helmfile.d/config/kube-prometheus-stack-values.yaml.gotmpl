commonLabels:
  group: polkadot
defaultRules:
  create: false
kubeApiServer:
  enabled: false
coreDns:
  enabled: false
kubeDns:
  enabled: true

###### ALERTMANAGER #####
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
      pagerduty_url: "https://events.eu.pagerduty.com/v2/enqueue"
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 24h
      receiver: default
      routes:
      - receiver: pagerduty
        match:
          severity: critical
        continue: true
      - receiver: default
        match:
          container: promtail
        group_interval: 12h # No frequent nagging about changes for this alert group
      - receiver: kusama-validator-matrixbot
        match:
          job: kusama-validator-watcher
          namespace: kusama
        continue: false
      - receiver: polkadot-validator-matrixbot
        match:
          job: polkadot-validator-watcher
          namespace: polkadot
        continue: false
      - receiver: default
    receivers:
    - name: default
      webhook_configs:
      - url:  "http://matrixbot.monitoring:8080/skill/alertmanager/webhook"
    - name: kusama-validator-matrixbot
      webhook_configs:
      - url:  "http://kusama-validator-watcher-matrixbot.kusama:8080/skill/alertmanager/webhook"
    - name: polkadot-validator-matrixbot
      webhook_configs:
      - url:  "http://polkadot-validator-watcher-matrixbot.polkadot:8080/skill/alertmanager/webhook"
    - name: pagerduty
      pagerduty_configs:
      - routing_key: {{ env "PAGERDUTY_INTEGRATION_KEY" | default "YOUR-INTEGRATION-KEY" }}
{{ if ne .Environment.Name "local" }}
  alertmanagerSpec:
    logLevel: debug
    replicas: 1
    resources:
      limits: {}
      requests:
        cpu: 10m
        memory: 50Mi
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
{{ end }}        
################      
  

###### GRAFANA #####
grafana:
  persistence:
    enabled: true
    type: sts
    storageClassName: "standard"
    accessModes:
      - ReadWriteOnce
    size: 1Gi
    finalizers:
      - kubernetes.io/pvc-protection
  enabled: true
  adminPassword: {{ env "GRAFANA_PASSWORD" | default "admin" }}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
{{ if ne .Environment.Name "local" }}
      cert-manager.io/cluster-issuer: letsencrypt
{{ end }}
    hosts:
      - {{ env "GRAFANA_DOMAIN" | default "example.com" | quote }}
    tls:
      - secretName: grafana-tls
        hosts:
        - {{ env "GRAFANA_DOMAIN" | default "example.com" | quote }}
  additionalDataSources:
  - name: Loki
    type: loki
    url: http://loki:3100/
    access: proxy
    isDefault: false
    editable: false
  serviceMonitor:
    selfMonitor: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      nginx-ingress:
        gnetId: 9614
        datasource: Prometheus
      node-exporter:
        gnetId: 1860
        revision: 29
        datasource: Prometheus
      kubernetes-pod-overview:
        gnetId: 12842
        revision: 2
        datasource: Prometheus  
################


nodeExporter:
  enabled: true
prometheus-node-exporter:
  podLabels:
    ## Add the 'node-exporter' label to be used by serviceMonitor to match standard common usage in rules and grafana dashboards
    ##
    jobLabel: node-exporter
    group: polkadot


prometheusOperator:
  enabled: true
  tls:
    enabled: false
  admissionWebhooks:
    enabled: false
{{ if ne .Environment.Name "local" }}
  resources:
    limits: {}
    requests:
      cpu: 10m
      memory: 50Mi
  prometheusConfigReloader:   
    resources:
      limits: {}
      requests:
        cpu: 10m
        memory: 50Mi 
{{ end }}


###### PROMETHEUS #####
prometheus:
  enabled: true
  prometheusSpec:
    retention: 35d
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
{{ if ne .Environment.Name "local" }}
    resources:
      limits: {}
      requests:
        cpu: 10m
        memory: 50Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    additionalScrapeConfigs:
    {{- range $index, $value := .Environment.Values.nodes }}
    - job_name: ne-{{ $value.name }}
      basic_auth:
        username: {{ env "VALIDATOR_HTTP_AUTH_USER" | default "prometheus" | quote }}
        password: {{ env "VALIDATOR_HTTP_AUTH_PASSWORD" | default "nginx_password" | quote }}
      static_configs:
      - targets:
        - {{ $value.ip }}:{{$value.nodeExporterPort | default 9100}}
        - {{ $value.ip }}:{{$value.validatorMetricsPort | default 9616}}
        labels:
          node: {{ $value.name }}
    {{- end }}         
{{ end }}
################



{{ if ne .Environment.Name "local" }}  
kubeStateMetrics:
  resources:
    limits: {}
    requests:
      cpu: 2m
      memory: 16Mi
{{ end }}
